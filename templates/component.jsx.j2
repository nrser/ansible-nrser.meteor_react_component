// standard imports
import { Meteor } from 'meteor/meteor';
import { _ } from 'meteor/underscore';
import { check, match, Match } from 'meteor/nrser:util';
import * as util from 'meteor/nrser:util';

// react imports
import React, { PropTypes } from 'react';
{% if component_data -%}
import { ReactMeteorData } from 'meteor/react-meteor-data';
import reactMixin from 'react-mixin';  
{% endif %}

// other package imports
import { FlowRouter } from 'meteor/kadira:flow-router';

// project imports
import { BaseComponent } from '/imports/ui/lib/BaseComponent.jsx';
import * as ui from '/imports/ui';
import { } from '/imports/collections';
import { store, actions } from '/imports/api/redux';
{% if component_redux or component_scope or component_tracker -%}
import {
  compose,
  composeAll,
  composeWithTracker,
  composeWithRedux,
  composeWithScope
} from '/imports/ui/lib/compose.js';
{% endif %}

const log = util.logger('{{ component_logger_name }}');
const ns = util.cssNamespacer('{{ component_css_class }}')

export class {{ component_class }} extends BaseComponent {
  static propTypes = {
    
  }; // propTypes
  
  static defaultProps = {
    
  }; // defaultProps
  
  static handlerNames = [
    
  ]; // handlerNames
  
  constructor(props) {
    super(props);
  } // constructor()
  
  {% if component_data -%}
  getMeteorData() {
    return {
    };
  } // getMeteorData()
  {% endif %}
  
  // helper methods
  // ==============
  
  // event handlers
  // ==============
  
  // render methods
  // ==============
  
  render() {
    return (
      <{{ component_element }} className={ ns("&") }>
      </{{ component_element }}>
    );
  } // render()
  
  // hook methods
  // ===========
  
} // {{ component_class }}

{% if component_data -%}
// mixin that calls `component.getMeteorData()`
reactMixin({{ component_class}}.prototype, ReactMeteorData);
{% endif %}

{% if component_tracker or component_redux or component_scope -%}
export const {{ component_class }}Container = composeAll(
  {% if component_tracker -%}
  composeWithTracker(function(props, onData) {
    onData(null, {});
  }),
  {% endif %}
  {% if component_scope -%}
  composerWithScope(function(props, onData, state) {
    onData(null, {});
  }),
  {% endif %}
  {% if component_redux -%}
  composeWithRedux(function(props, onData, state) {
    onData(null, {});
  }),
  {% endif %}
)({{ component_class }});
{% endif %}
